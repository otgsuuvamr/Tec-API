const token = localStorage.getItem("token");
if (!token) {
  alert("Faça login para acessar esta página.");
  window.location.href = "/public/index.html";
}



3. Criar uma página "dashboard.html" para facilitar a navegação (opcional, mas recomendado)
No login, após autenticar, redirecione para /public/dashboard.html que tenha links para:

Produtos (products.html)

Perfil (profile.html)

Logout

Exemplo simples:

html
Copiar
Editar
<nav>
  <a href="products.html">Produtos</a> |
  <a href="profile.html">Perfil</a> |
  <a href="#" onclick="logout()">Sair</a>
</nav>

<script>
  function logout() {
    localStorage.removeItem("token");
    window.location.href = "index.html";
  }
</script>



Seu roteamento e middleware de autenticação estão corretos e bem organizados! Você já tem:

Rotas públicas: /register, /login com validação.

Rotas privadas (protegidas por requireAuth): /me (GET, PUT, DELETE), /me/password (PUT), /users (GET).

Para garantir que o front acesse tudo corretamente:
Use base /users ou /auth?
Pelo código, suas rotas estão em /users, certo?
Então o front deve acessar, por exemplo:

GET http://localhost:3000/users/me para pegar perfil

PUT http://localhost:3000/users/me para atualizar nome

PUT http://localhost:3000/users/me/password para alterar senha

Se no front você está usando /auth/me, terá erro 404.

Passos para corrigir e organizar
Ajuste no front:
No profile.html e demais páginas do perfil, altere a base API para:

js
Copiar
Editar
const API = "http://localhost:3000/users";
E as chamadas para:

js
Copiar
Editar
fetch(`${API}/me`, { headers: headers() })
fetch(`${API}/me`, { method: "PUT", headers: headers(), body: JSON.stringify({ name }) })
Middleware requireAuth deve validar o token e popular req.user
Seu controlador usa req.user.id para pegar o usuário. Certifique que o middleware requireAuth decodifica o token e define req.user.

No login, após salvar token, redirecione para a página protegida, ex:

js
Copiar
Editar
window.location.href = "product.html";
No front, sempre passar o token no header Authorization:

js
Copiar
Editar
headers: {
  "Content-Type": "application/json",
  Authorization: "Bearer " + localStorage.getItem("token")
}
Logout: Remova token do localStorage e redirecione para index.html.

Quer que eu te ajude a revisar o middleware requireAuth para garantir que ele está configurado corretamente? Ou quer que eu te forneça um exemplo completo de front profile e backend funcionando juntos?

4. Na sua página de produtos (product.html), adicione um botão/link para voltar para o perfil e logout
Assim o usuário navega entre as páginas privadas.

5. Exemplo rápido para carregar perfil no profile.html
js
Copiar
Editar
fetch(`${API}/me`, {
  headers: { Authorization: "Bearer " + token }
})
.then(res => {
  if (!res.ok) throw new Error("Token inválido ou expirado");
  return res.json();
})
.then(data => {
  document.getElementById("name").value = data.name || data.user?.name;
  document.getElementById("email").value = data.email || data.user?.email;
})
.catch(() => {
  alert("Sessão expirada, faça login novamente.");
  localStorage.removeItem("token");
  window.location.href = "index.html";
});




7. Sobre suas páginas updatePass.html, updateEmail.html e deleteAcc.html
Use a mesma ideia:

Pegar token do localStorage

Fazer fetch nas rotas do backend

Proteger acesso

Navegar entre elas com links na profile.html