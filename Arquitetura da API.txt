Arquivo: "server.js":

const express = require("express");
const dotenv = require("dotenv");
const cors = require("cors");
const connectDB = require("./config/dbTec");

const userRoutes = require("./routes/userRoutes");
const productRoutes = require("./routes/productRoutes");
const requireAuth = require("./middlewares/auth/requireAuth");

dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());

// Rotas p√∫blicas;
app.use("/auth", userRoutes);

// Middleware de autentica√ß√£o global;
app.use(requireAuth);

// Rotas privadas (Principal);
app.use("/products", productRoutes);

// Rota de Boas-Vindas;
app.get("/", (req, res) => {
  res.status(200).send("Boas-Vindas √† API product");
});

// Inicia o servidor na porta estabelecida;
const PORT = process.env.PORT;
app.listen(PORT, () => {
  console.log(`Servidor rodando`);
});


Arquivo: "product.html":

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Loja Tec</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-blue-100 text-gray-800 font-sans">
    <nav class="fixed top-0 left-0 right-0 bg-white shadow-md px-6 py-3 flex justify-between items-center z-50">
      <h1 class="text-xl font-bold text-blue-600">LojaTec</h1>
      <div class="flex items-center gap-6">
        <!-- √çcone de perfil -->
        <a href="public/profile.html" class="text-gray-700 hover:text-blue-600" title="Meu Perfil">
          <svg xmlns="http://www.w3.org/2000/svg" class="w-7 h-7" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M5.121 17.804A9 9 0 1118.879 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z" />
          </svg>
        </a>
        <!-- Bot√£o sair -->
        <button onclick="logout()" class="text-red-600 hover:text-red-800 font-semibold">
          Sair
        </button>
      </div>
    </nav>
    <script>
      function logout() {
        localStorage.removeItem("token");
        window.location.href = "index.html";
      }
    </script>
    
      </div>
    </nav>

    <!-- üîπ Ajuste de espa√ßamento para n√£o esconder o conte√∫do -->
    <div class="pt-20 max-w-4xl mx-auto p-5">
      <h1 class="text-3xl font-bold text-center mb-6">
        üì¶ Gerenciador de Produtos
      </h1>

      <div class="grid grid-cols-2 gap-4 mb-6">
        <input id="id" placeholder="ID" class="input" />
        <input id="titulo" placeholder="T√≠tulo" class="input" />
        <input id="preco" placeholder="Pre√ßo" class="input" />
        <input id="descricao" placeholder="Descri√ß√£o" class="input" />
        <label class="flex items-center gap-2">
          <input type="checkbox" id="emEstoque" checked />
          <span>Em Estoque?</span>
        </label>
      </div>

      <div class="flex gap-4 justify-center mb-6">
        <button onclick="AddProd()" class="btn bg-green-500">Adicionar</button>
        <button onclick="AttProd()" class="btn bg-yellow-500">Atualizar</button>
        <button onclick="DeleteProd()" class="btn bg-red-500">Excluir</button>
        <button onclick="ReadProd()" class="btn bg-blue-500">Buscar</button>
      </div>

      <div id="result" class="bg-white shadow p-4 rounded"></div>
    </div>

    <style>
      .input {
        padding: 0.5rem;
        border: 1px solid #8f8f8f;
        border-radius: 0.375rem;
        width: 100%;
      }

      .btn {
        padding: 0.5rem 1rem;
        color: white;
        border: none;
        border-radius: 0.375rem;
        cursor: pointer;
      }
    </style>

    <script>
      const API = "http://localhost:3000/products/";
      const token = localStorage.getItem("token");

      if (!token) {
        alert("Voc√™ precisa estar logado para acessar esta √°rea.");
        window.location.href = "/public/index.html";
      }

      function renderResult(data) {
        const resultDiv = document.getElementById("result");
        let html = "";

        if (data.message) {
          html += `<p class="text-green-700 font-semibold mb-2">${data.message}</p>`;
        }

        // Produto √∫nico
        if (data.product) {
          html += formatProduct(data.product);
        }

        // Lista de produtos
        else if (data.products && Array.isArray(data.products)) {
          html += `<p>Total de produtos: ${data.totalProd}</p>`;
          data.products.forEach((p, index) => {
            html += `<div class="mt-2 border-t pt-2">${formatProduct(
              p,
              index + 1
            )}</div>`;
          });
        }

        // Mensagem de texto pura (ex: delete)
        else if (typeof data.message === "string") {
          html += `<p>${data.message}</p>`;
        }

        // Erro
        else if (data.error) {
          html += `<p class="text-red-600">‚ùå Erro: ${data.error}</p>`;
        }

        resultDiv.innerHTML = html;
      }

      function formatProduct(prod, index = null) {
        const emEstoque = prod.emEstoque ? "Sim" : "N√£o";
        return `
              <div class="bg-gray-50 p-3 rounded shadow-sm mb-2">
            ${
              index
                ? `<h3 class="font-bold text-lg mb-1">Produto ${index}</h3>`
                : ""
            }
            <p><strong>ID:</strong> ${prod._id}</p>
            <p><strong>T√≠tulo:</strong> ${prod.titulo}</p>
            <p><strong>Pre√ßo:</strong> R$ ${prod.preco.toFixed(2)}</p>
            <p><strong>Descri√ß√£o:</strong> ${prod.descricao}</p>
            <p><strong>Em Estoque:</strong> ${emEstoque}</p>
          </div>
        `;
      }

      function AddProd() {
        const titulo = document.getElementById("titulo").value;
        const preco = parseFloat(document.getElementById("preco").value);
        const descricao = document.getElementById("descricao").value;
        const emEstoque = document.getElementById("emEstoque").checked;

        fetch(API, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + token,
          },
          body: JSON.stringify({ titulo, preco, descricao, emEstoque }),
        })
          .then((res) => res.json())
          .then(renderResult)
          .catch((error) => {
            error.json().then((error) => {
              renderError("Erro: " + (error.error || "Erro desconhecido."));
            });
          });
      }

      function AttProd() {
        const id = document.getElementById("id").value;
        const titulo = document.getElementById("titulo").value;
        const precoRaw = document.getElementById("preco").value.trim();
        const descricao = document.getElementById("descricao").value;
        const emEstoque = document.getElementById("emEstoque").checked;

        const payload = {};
        if (titulo) payload.titulo = titulo;
        if (precoRaw) {
          const preco = parseFloat(precoRaw);
          if (!isNaN(preco)) payload.preco = preco;
        }
        if (descricao) payload.descricao = descricao;
        payload.emEstoque = emEstoque;

        fetch(API + id, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + token,
          },
          body: JSON.stringify(payload),
        })
          .then((res) => res.json())
          .then(renderResult)
          .catch(async (error) => {
            error.json().then((error) => {
              renderError("Erro: " + (error.error || "Erro desconhecido."));
            });
          });
      }

      function DeleteProd() {
        const id = document.getElementById("id").value;
        fetch(API + id, {
          method: "DELETE",
          headers: {
            Authorization: "Bearer " + token,
          },
        })
          .then((res) => res.text())
          .then((text) => renderResult({ message: text }))
          .catch((error) => {
            error.json().then((error) => {
              renderError("Erro: " + (error.error || "Erro desconhecido."));
            });
          });
      }

      function ReadProd() {
        const id = document.getElementById("id").value;
        const url = id ? API + id : API;

        fetch(url, {
          headers: {
            Authorization: "Bearer " + token,
          },
        })
          .then((res) => res.json())
          .then(renderResult)
          .catch((error) => {
            error.json().then((error) => {
              renderError("Erro: " + (error.error || "Erro desconhecido."));
            });
          });
      }
    </script>
  </body>
</html>


Arquivo: "/validations/loginSchema.js":

const Joi = require("joi");

const loginSchema = Joi.object({
  email: Joi.string().email().required().messages({
    "string.base": "O e-mail deve ser um texto.",
    "string.email": "O e-mail deve estar em um formato v√°lido.",
    "any.required": "O e-mail √© obrigat√≥rio."
  }),
  password: Joi.string().min(6).required().messages({
    "string.base": "A senha deve ser um texto.",
    "string.min": "A senha deve ter pelo menos 6 caracteres.",
    "any.required": "A senha √© obrigat√≥ria."
  })
});

module.exports = { loginSchema };


Arquivo: "/validations/changePasswordSchema.js":

const Joi = require("joi");

const changePasswordSchema = Joi.object({
  currentPass: Joi.string().min(6).required().messages({
    "string.base": "A senha atual deve ser um texto.",
    "string.min": "A senha atual deve ter pelo menos 6 caracteres.",
    "any.required": "A senha atual √© obrigat√≥ria."
  }),
  newPass: Joi.string().min(6).required().messages({
    "string.base": "A nova senha deve ser um texto.",
    "string.min": "A nova senha deve ter pelo menos 6 caracteres.",
    "any.required": "A nova senha √© obrigat√≥ria."
  }),
  confNewPass: Joi.any().valid(Joi.ref("newPass")).required().messages({
    "any.only": "A confirma√ß√£o de senha n√£o confere.",
    "any.required": "A confirma√ß√£o de senha √© obrigat√≥ria."
  })
});

module.exports = { changePasswordSchema };


Arquivo: "/validations/productSchema.js":

const Joi = require("joi");

const productSchema = Joi.object({
  titulo: Joi.string().min(2).optional().messages({
    "string.base": "O t√≠tulo deve ser um texto.",
    "string.min": "O t√≠tulo deve ter pelo menos 2 caracteres.",
  }),
  preco: Joi.number().positive().optional().messages({
    "number.base": "O pre√ßo deve ser um n√∫mero.",
    "number.positive": "O pre√ßo deve ser positivo.",
  }),
  descricao: Joi.string().min(3).optional().messages({
    "string.base": "A descri√ß√£o deve ser um texto.",
    "string.min": "A descri√ß√£o deve ter pelo menos 3 caracteres.",
  }),
  emEstoque: Joi.boolean().default(true),
});

module.exports = { productSchema };


Arquivo: "/validations/registerSchema.js":

const Joi = require("joi");

const registerSchema = Joi.object({
  name: Joi.string().min(2).required().messages({
    "string-base": "Seu nome deve ser no formato de texto.",
    "string-min": "Seu nome deve conter ao menos 2 caracteres.",
    "any.required": "O campo Nome √© obrigat√≥rio.",
  }),
  email: Joi.string().email().required().messages({
    "string.email": "E-mail inv√°lido.",
    "any.required": "O campo E-mail √© obrigat√≥rio.",
  }),
  password: Joi.string().min(6).required().messages({
    "string.min": "Sua senha deve conter ao menos 6 caracteres.",
    "any.required": "O campo Senha √© obrigat√≥ria.",
  }),
  confPass: Joi.any().valid(Joi.ref("password")).required().messages({
    "any.only": "As senhas n√£o coincidem.",
    "any.required": "A confirma√ß√£o de senha √© obrigat√≥ria.",
  }),
});

module.exports = { registerSchema };


Arquivo: "/validations/searchUserSchema.js":

const Joi = require("joi");

const searchUserSchema = Joi.object({
  name: Joi.string().allow("", null),
  email: Joi.string().email().allow("", null),
  page: Joi.number().integer().min(1).default(1),
  limit: Joi.number().integer().min(1).max(50).default(10)
});

module.exports = { searchUserSchema };


Arquivo: "/validations/updateEmailSchema.js":

const Joi = require("joi");

const updateEmailSchema = Joi.object({
  newEmail: Joi.string().email().required().messages({
    "string.email": "Informe um e-mail v√°lido.",
    "any.required": "O novo e-mail √© obrigat√≥rio."
  })
});

module.exports = { updateEmailSchema };


Arquivo: "/validations/updateNameSchema.js":

const Joi = require("joi");

const updateUserSchema = Joi.object({
  name: Joi.string().min(2).messages({
    "string.base": "O nome deve ser um texto.",
    "string.min": "O nome deve ter pelo menos 2 caracteres."
  }),
  email: Joi.string().email().messages({
    "string.base": "O e-mail deve ser um texto.",
    "string.email": "O e-mail deve estar em um formato v√°lido."
  })
}).min(1).messages({
  "object.min": "Informe ao menos um campo para atualiza√ß√£o."
});

module.exports = { updateUserSchema };


Arquivo: "/routes/productRoutes.js":

const express = require("express");
const router = express.Router();

const productController = require("../controllers/productControllers");
const validateProduct = require("../middlewares/products/validateProduct");

const CheckID = require("../middlewares/CheckID");

router.post("/", validateProduct, productController.create);
router.put("/:id", CheckID, validateProduct, productController.update);
router.delete("/:id", CheckID, productController.delete);
router.get("/", productController.read);
router.get("/:id", CheckID, productController.readID);

module.exports = router;


Arquivo: "/routes/userRoutes.js":

const express = require("express");
const router = express.Router();

const requireAuth = require("../middlewares/auth/requireAuth");

const { registerSchema } = require("../validations/registerSchema");
const { loginSchema } = require("../validations/loginSchema");
const { updateUserSchema } = require("../validations/updateNameSchema");
const { updateEmailSchema } = require("../validations/updateEmailSchema");
const { changePasswordSchema } = require("../validations/changePasswordSchema");
const { searchUserSchema } = require("../validations/searchUserSchema");

const validateUser = require("../middlewares/auth/validateUser");

const {
  register,
  login,
  profile,
  updateUser,
  updateEmail,
  changePassword,
  deleteUser,
  searchUsers,
} = require("../controllers/userControllers");

router.post("/register", validateUser(registerSchema), register);
router.post("/login", validateUser(loginSchema), login);


router.use(requireAuth);
router.get("/me", profile);
router.put("/me", validateUser(updateUserSchema), updateUser);
router.put("/me/email", validateUser(updateEmailSchema), updateEmail);
router.put("/me/password", validateUser(changePasswordSchema), changePassword);
router.delete("/me", deleteUser);
router.get("/users", validateUser(searchUserSchema), searchUsers);

module.exports = router;


Arquivo: "/public/deleteAcc.html":

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>Excluir Conta</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-blue-100 flex justify-center items-center min-h-screen">
    <nav
      class="fixed top-0 left-0 right-0 bg-white shadow-md p-4 flex justify-between items-center z-50"
    >
    <a href="../product.html"><h1 class="text-xl font-bold text-blue-600">LojaTec</h1></a>
      <div class="flex items-center gap-4">
        <a
          href="profile.html"
          class="text-gray-700 hover:text-blue-600"
          title="Meu Perfil"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-7 h-7"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5.121 17.804A9 9 0 1118.879 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
        </a>
        <button
          onclick="logout()"
          class="text-red-600 hover:text-red-800 font-semibold"
        >
          Sair
        </button>

        <script>
          function logout() {
            localStorage.removeItem("token");
            window.location.href = "index.html";
          }
        </script>
      </div>
    </nav>

    <div class="bg-white p-6 rounded shadow-md w-96">
      <h1 class="text-xl font-bold mb-4 text-center text-red-600">
        ‚ùå Excluir Conta
      </h1>
      <p class="text-center mb-4">
        Tem certeza que deseja excluir sua conta? Esta a√ß√£o n√£o pode ser
        desfeita.
      </p>

      <button onclick="deleteAcc()" class="btn bg-red-600 w-full">
        Excluir Conta
      </button>
      <p id="status" class="text-sm text-center mt-3 text-red-600"></p>
    </div>

    <style>
      .btn {
        padding: 0.5rem;
        color: white;
        border: none;
        border-radius: 0.375rem;
        cursor: pointer;
      }
    </style>

    <script>
      const API = "http://localhost:3000/auth/me";
      const token = localStorage.getItem("token");

      async function deleteAcc() {
        if (!confirm("‚ö†Ô∏è Tem certeza que deseja excluir sua conta?")) return;

        const res = await fetch(API, {
          method: "DELETE",
          headers: { Authorization: "Bearer " + token },
        });

        const data = await res.json();
        alert(data.message || data.error);

        if (res.ok) {
          localStorage.removeItem("token");
          window.location.href = "index.html";
        }
      }
    </script>
  </body>
</html>



Arquivo: "/public/index.html":

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>√Årea P√∫blica - LojaTec</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body
    class="bg-blue-50 text-gray-800 min-h-screen flex flex-col justify-center items-center"
  >
    <nav
      class="fixed top-0 left-0 right-0 bg-white shadow-md p-4 flex justify-between items-center z-50"
    >
    <a href="../product.html"><h1 class="text-xl font-bold text-blue-600">LojaTec</h1></a>
      <div class="flex items-center gap-4">
        <a
          href="public/profile.html"
          class="text-gray-700 hover:text-blue-600"
          title="Meu Perfil"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-7 h-7"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5.121 17.804A9 9 0 1118.879 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
        </a>
        <button
          onclick="logout()"
          class="text-red-600 hover:text-red-800 font-semibold"
        >
          Sair
        </button>

        <script>
          function logout() {
            localStorage.removeItem("token");
            window.location.href = "index.html";
          }
        </script>
      </div>
    </nav>

    <div class="bg-white shadow-lg rounded-lg p-8 max-w-md w-full">
      <h1 class="text-2xl font-bold text-center mb-4">
        üîì √Årea P√∫blica da LojaTec
      </h1>
      <p class="text-center text-sm mb-6">
        Esta √© uma se√ß√£o p√∫blica da aplica√ß√£o. Para acessar a √°rea de controle
        de estoque, √© necess√°rio estar autenticado. Entre em sua conta ou
        cadastre-se!
      </p>

      <form id="loginForm" class="space-y-4">
        <input
          type="email"
          id="email"
          placeholder="E-mail"
          required
          class="w-full p-2 border rounded"
        />
        <input
          type="password"
          id="password"
          placeholder="Senha"
          required
          class="w-full p-2 border rounded"
        />
        <button
          type="submit"
          class="w-full bg-blue-600 hover:bg-blue-700 text-white p-2 rounded"
        >
          Entrar
        </button>
      </form>

      <p id="status" class="text-center mt-4 text-sm text-red-600"></p>

      <div class="mt-6 text-center text-sm">
        Ainda n√£o tem uma conta?
        <a href="register.html" class="text-blue-600 underline">
          Registre-se
        </a>
      </div>
    </div>

    <script>
      document
        .getElementById("loginForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault();
          const email = document.getElementById("email").value;
          const password = document.getElementById("password").value;

          const res = await fetch("http://localhost:3000/auth/login", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ email, password }),
          });

          const data = await res.json();

          if (res.ok) {
            // Salvar token no localStorage
            localStorage.setItem("token", data.token);

            // Redirecionar para a √°rea privada
            window.location.href = "../product.html"; // Ex: sua tela de produtos
          } else {
            document.getElementById("status").textContent =
              data.error || "Erro ao autenticar.";
          }
        });
    </script>
  </body>
</html>


Arquivo: "/public/profile.html":

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Meu Perfil</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-blue-100 text-gray-800 font-sans">
    <!-- üîπ Navbar -->
    <nav
      class="fixed top-0 left-0 right-0 bg-white shadow-md px-6 py-3 flex justify-between items-center z-50"
    >
    <a href="../product.html"><h1 class="text-xl font-bold text-blue-600">LojaTec</h1></a>
      <div class="flex items-center gap-6">
        <!-- √çcone de perfil -->
        <a
          href="profile.html"
          class="text-gray-700 hover:text-blue-600"
          title="Meu Perfil"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-7 h-7"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5.121 17.804A9 9 0 1118.879 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
        </a>
        <!-- Bot√£o sair -->
        <button
          onclick="logout()"
          class="text-red-600 hover:text-red-800 font-semibold"
        >
          Sair
        </button>
      </div>
    </nav>

    <!-- üîπ Conte√∫do principal -->
    <div class="max-w-xl mx-auto mt-28 p-6 bg-white shadow-md rounded-lg">
      <h2 class="text-2xl font-bold mb-6 text-center">üë§ Meu Perfil</h2>

      <!-- Nome -->
      <div class="mb-6">
        <label class="block font-semibold mb-1">Nome:</label>
        <div class="flex gap-2">
          <input id="name" class="input flex-1" />
          <button onclick="updateName()" class="btn bg-green-500">
            Atualizar
          </button>
        </div>
      </div>

      <!-- E-mail -->
      <div class="mb-6">
        <label class="block font-semibold mb-1">E-mail:</label>
        <input id="email" class="input bg-gray-100 w-full" disabled />
      </div>

      <!-- A√ß√µes -->
      <div class="space-y-3">
        <a href="updatePass.html" class="btn bg-yellow-500 block text-center"
          >üîê Alterar Senha</a
        >
        <a href="updateEmail.html" class="btn bg-purple-500 block text-center"
          >üìß Alterar E-mail</a
        >
        <a href="deleteAcc.html" class="btn bg-red-600 block text-center"
          >‚ùå Excluir Conta</a
        >
      </div>
    </div>

    <!-- üîπ Estilos globais -->
    <style>
      .input {
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 0.375rem;
      }
      .btn {
        padding: 0.5rem 1rem;
        color: white;
        border: none;
        border-radius: 0.375rem;
        cursor: pointer;
        text-decoration: none;
      }
    </style>

    <!-- üîπ Scripts -->
    <script>
      const API = "http://localhost:3000/auth";

      const headers = () => ({
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      });

      function logout() {
        localStorage.removeItem("token");
        window.location.href = "index.html";
      }

      function loadProfile() {
        fetch(`${API}/me`, { headers: headers() })
          .then((res) => res.json())
          .then((data) => {
            // ajuste para acessar user corretamente
            const user = data.user || data;
            document.getElementById("name").value = user.name;
            document.getElementById("email").value = user.email;
          });
      }

      function updateName() {
        const name = document.getElementById("name").value;

        if (!name || name.trim().length < 2) {
          alert("‚ùå O nome deve ter pelo menos 2 caracteres.");
          return;
        }

        fetch(`${API}/me`, {
          method: "PUT",
          headers: headers(),
          body: JSON.stringify({ name }),
        })
          .then((res) => res.json())
          .then((data) => {
            alert(data.message || "Nome atualizado!");
            loadProfile();
          });
      }

      // Carrega os dados ao entrar
      loadProfile();
    </script>
  </body>
</html>


Arquivo: "/public/register.html":

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>Cadastro - LojaTec</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-blue-50 min-h-screen flex items-center justify-center">
    <nav
      class="fixed top-0 left-0 right-0 bg-white shadow-md p-4 flex justify-between items-center z-50"
    >
    <a href="../product.html"><h1 class="text-xl font-bold text-blue-600">LojaTec</h1></a>
      <div class="flex items-center gap-4">
        <a
          href="public/profile.html"
          class="text-gray-700 hover:text-blue-600"
          title="Meu Perfil"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-7 h-7"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5.121 17.804A9 9 0 1118.879 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
        </a>
        <button
          onclick="logout()"
          class="text-red-600 hover:text-red-800 font-semibold"
        >
          Sair
        </button>

        <script>
          function logout() {
            localStorage.removeItem("token");
            window.location.href = "index.html";
          }
        </script>
      </div>
    </nav>

    <div class="bg-white shadow-md rounded p-6 w-full max-w-md">
      <h1 class="text-2xl font-bold mb-4 text-center">
        üìù Criar Conta na LojaTec
      </h1>

      <form id="registerForm" class="space-y-4">
        <input
          type="text"
          id="name"
          placeholder="Seu nome"
          required
          class="input"
        />
        <input
          type="email"
          id="email"
          placeholder="Seu e-mail"
          required
          class="input"
        />
        <input
          type="password"
          id="password"
          placeholder="Crie uma senha"
          required
          class="input"
        />
        <input
          type="password"
          id="confPass"
          placeholder="Confirme a senha"
          required
          class="input"
        />
        <button type="submit" class="btn bg-green-600 hover:bg-green-700">
          Registrar
        </button>
      </form>

      <p id="status" class="text-sm text-center text-red-600 mt-3"></p>

      <div class="mt-4 text-center text-sm">
        J√° tem conta?
        <a href="index.html" class="text-blue-600 underline">Fazer login</a>
      </div>
    </div>

    <style>
      .input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 0.375rem;
      }
      .btn {
        width: 100%;
        padding: 0.5rem;
        color: white;
        border: none;
        border-radius: 0.375rem;
        cursor: pointer;
      }
    </style>

    <script>
      const API = "http://localhost:3000/auth/register";

      document
        .getElementById("registerForm")
        .addEventListener("submit", async (e) => {
          e.preventDefault();

          const name = document.getElementById("name").value;
          const email = document.getElementById("email").value;
          const password = document.getElementById("password").value;
          const confPass = document.getElementById("confPass").value;

          const res = await fetch(API, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ name, email, password, confPass }),
          });

          const data = await res.json();

          if (res.ok) {
            alert("‚úÖ Cadastro realizado com sucesso! Fa√ßa login.");
            window.location.href = "index.html";
          } else {
            document.getElementById("status").textContent =
              data.error || "Erro ao cadastrar.";
          }
        });
    </script>
  </body>
</html>


Arquivo: "/public/updateEmail.html":

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>Alterar E-mail</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-blue-100 flex justify-center items-center min-h-screen">
    <nav
      class="fixed top-0 left-0 right-0 bg-white shadow-md p-4 flex justify-between items-center z-50"
    >
    <a href="../product.html"><h1 class="text-xl font-bold text-blue-600">LojaTec</h1></a>
      <div class="flex items-center gap-4">
        <a
          href="profile.html"
          class="text-gray-700 hover:text-blue-600"
          title="Meu Perfil"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-7 h-7"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5.121 17.804A9 9 0 1118.879 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
        </a>
        <button
          onclick="logout()"
          class="text-red-600 hover:text-red-800 font-semibold"
        >
          Sair
        </button>

        <script>
          function logout() {
            localStorage.removeItem("token");
            window.location.href = "index.html";
          }
        </script>
      </div>
    </nav>

    <div class="bg-white p-6 rounded shadow-md w-96">
      <h1 class="text-xl font-bold mb-4 text-center">üìß Alterar E-mail</h1>

      <input
        id="newEmail"
        type="email"
        placeholder="Novo e-mail"
        class="input mb-3"
      />

      <button onclick="updateEmail()" class="btn bg-purple-600 w-full">
        Salvar
      </button>
      <p id="status" class="text-sm text-center mt-3 text-green-600"></p>
    </div>

    <style>
      .input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 0.375rem;
      }
      .btn {
        padding: 0.5rem;
        color: white;
        border: none;
        border-radius: 0.375rem;
        cursor: pointer;
      }
    </style>

    <script>
      const API = "http://localhost:3000/auth/me/email";
      const token = localStorage.getItem("token");

      async function updateEmail() {
        const newEmail = document.getElementById("newEmail").value;

        const res = await fetch(API, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + token,
          },
          body: JSON.stringify({ newEmail }),
        });

        const data = await res.json();
        document.getElementById("status").textContent =
          data.message || data.error;
      }
    </script>
  </body>
</html>


Arquivo: "/public/updatePass.html":

<!DOCTYPE html>
<html lang="pt-BR">
  <head>
    <meta charset="UTF-8" />
    <title>Alterar Senha</title>
    <script src="https://cdn.tailwindcss.com"></script>
  </head>
  <body class="bg-blue-100 flex justify-center items-center min-h-screen">
    <!-- üîπ Navbar -->
    <nav
      class="fixed top-0 left-0 right-0 bg-white shadow-md p-4 flex justify-between items-center z-50"
    >
      <a href="../product.html"><h1 class="text-xl font-bold text-blue-600">LojaTec</h1></a>
      <div class="flex items-center gap-4">
        <a
          href="profile.html"
          class="text-gray-700 hover:text-blue-600"
          title="Meu Perfil"
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            class="w-7 h-7"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5.121 17.804A9 9 0 1118.879 6.196M15 11a3 3 0 11-6 0 3 3 0 016 0z"
            />
          </svg>
        </a>
        <button
          onclick="logout()"
          class="text-red-600 hover:text-red-800 font-semibold"
        >
          Sair
        </button>
      </div>
    </nav>

    <!-- üîπ Conte√∫do -->
    <div class="bg-white p-6 rounded shadow-md w-96 mt-28">
      <h1 class="text-xl font-bold mb-4 text-center">üîê Alterar Senha</h1>

      <input
        id="currentPass"
        type="password"
        placeholder="Senha atual"
        class="input mb-3"
      />
      <input
        id="newPass"
        type="password"
        placeholder="Nova senha"
        class="input mb-3"
      />
      <input
        id="confNewPass"
        type="password"
        placeholder="Confirme nova senha"
        class="input mb-3"
      />

      <button onclick="updatePass()" class="btn bg-yellow-600 w-full">
        Salvar
      </button>

      <!-- üîπ status din√¢mico -->
      <p id="status" class="text-sm text-center mt-3 font-semibold"></p>
    </div>

    <style>
      .input {
        width: 100%;
        padding: 0.5rem;
        border: 1px solid #ccc;
        border-radius: 0.375rem;
      }
      .btn {
        padding: 0.5rem;
        color: white;
        border: none;
        border-radius: 0.375rem;
        cursor: pointer;
      }
    </style>

    <script>
      const API = "http://localhost:3000/auth/me/password";
      const token = localStorage.getItem("token");

      function logout() {
        localStorage.removeItem("token");
        window.location.href = "index.html";
      }

      async function updatePass() {
        const currentPass = document.getElementById("currentPass").value;
        const newPass = document.getElementById("newPass").value;
        const confNewPass = document.getElementById("confNewPass").value;

        const res = await fetch(API, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: "Bearer " + token,
          },
          body: JSON.stringify({ currentPass, newPass, confNewPass }),
        });

        const data = await res.json();
        const statusEl = document.getElementById("status");

        if (res.ok) {
          statusEl.textContent = data.message || "Senha alterada com sucesso!";
          statusEl.className =
            "text-sm text-center mt-3 font-semibold text-green-600";
        } else {
          statusEl.textContent = data.error || "Erro ao alterar senha.";
          statusEl.className =
            "text-sm text-center mt-3 font-semibold text-red-600";
        }
      }
    </script>
  </body>
</html>


Arquivo: "/models/User.js":

const mongoose = require("mongoose");

const userSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: true,
      trim: true,
    },
    email: {
      type: String,
      required: true,
      unique: true,
      trim: true,
      lowercase: true,
    },
    password: {
      type: String,
      required: true,
      minlength: 6,
      select: false,
    },

    createdAt: {
      type: Date,
      default: Date.now,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("User", userSchema);


Arquivo: "/models/tec.js":

const mongoose = require("mongoose"); // Importa a biblioteca do MongoDB.

const tecSchema = new mongoose.Schema(
  {
    // Tabela: Schema; Campos: titulo, preco, descricao e status;
    titulo: {
      type: String,
      required: true,
    },
    preco: {
      type: Number,
      required: true,
    },
    descricao: {
      type: String,
      required: true,
    },
    emEstoque: {
      type: Boolean,
      default: true,
    },
  },
  { timestamps: true }
);

module.exports = mongoose.model("Tec", tecSchema);


Arquivo: "/middlewares/CheckID.js":

const mongoose = require("mongoose");

module.exports = (req, res, next) => {
  const { id } = req.params;

  if (!mongoose.Types.ObjectId.isValid(id)) {
    return res.status(400).json({ error: "ID inv√°lido." });
  }

  next();
};


Arquivo: "/middlewares/token.js":

const jwt = require("jsonwebtoken");

module.exports = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token)
    return res
      .status(401)
      .json({ error: "Acesso negado. Fa√ßa login para acessar." });

  try {
    const verified = jwt.verify(token, process.env.SECRET);
    req.user = verified;
    next();
  } catch (err) {
    res.status(403).json({ error: "Token inv√°lido." });
  }
};


Arquivo: "/middlewares/auth/requireAuth.js":

const jwt = require("jsonwebtoken");

module.exports = (req, res, next) => {
  const authHeader = req.headers.authorization;

  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ error: "Token n√£o fornecido." });
  }

  const token = authHeader.split(" ")[1];

  try {
    const decoded = jwt.verify(token, process.env.SECRET);
    
    req.user = decoded; // Armazena dados do usu√°rio no request
    next();
  } catch (err) {
    return res.status(401).json({ error: "Token inv√°lido ou expirado." });
  }
};


Arquivo: "/middlewares/auth/validateUser.js":

module.exports = (schema) => (req, res, next) => {
  const { error } = schema.validate(req.body, { abortEarly: true });

  if (error) {
    return res.status(400).json({ error: error.details[0].message });
  }

  next();
};


Arquivo: "/middlewares/products/validateProduct.js":

const { productSchema } = require("../../validations/productSchema");

module.exports = (req, res, next) => {
  const body = { ...req.body };

  // Limpa campos vazios (√∫til para update)
  Object.keys(body).forEach((key) => {
    if (body[key] === "") delete body[key];
  });

  // Valor padr√£o para emEstoque
  if (req.method === "POST" && body.emEstoque === undefined) {
    body.emEstoque = true;
  }

  if ("emEstoque" in body) {
    if (typeof body.emEstoque === "string") {
      body.emEstoque = body.emEstoque.toLowerCase() === "true";
    } else {
      body.emEstoque = Boolean(body.emEstoque);
    }
  }

  const { error } = productSchema.validate(body);

  if (error) {
    return res.status(400).json({ error: error.details[0].message });
  }

  req.body = body;
  next();
};


Arquivo: "/controllers/productControllers.js":

const Tec = require("../models/tec");

// Cria novos produtos;
exports.create = async (req, res) => {
  const { titulo, preco, descricao, emEstoque } = req.body;
  try {
    // Cria√ß√£o dos produtos;
    const newProd = new Tec({
      titulo,
      preco,
      descricao,
      emEstoque: emEstoque !== undefined ? emEstoque : true,
    });
    await newProd.save(); // Salve o novo produto no banco;
    res.status(201).json({
      message: "Produto criado com sucesso: ",
      product: newProd,
    });
  } catch (error) {
    res.status(500).json({ error: "Erro ao incluir novo produto." });
  }
};

// Atualizar produtos j√° existentes por ID;
exports.update = async (req, res) => {
  const { id } = req.params;
  const data = req.body;

  try {
    const existentProd = await Tec.findById(id);

    if (!existentProd) {
      return res.status(404).json({ error: "Produto n√£o encontrado." });
    }

    // Campos obrigat√≥rios validados pelo middleware

    const updateProd = await Tec.findByIdAndUpdate(id, data, {
      new: true,
    });

    res.status(200).json({
      message: "Produto atualizado com sucesso.",
      product: updateProd,
    });
  } catch (error) {
    console.error("Erro na atualiza√ß√£o:", error);
    res.status(500).json({ error: "Erro ao atualizar produto." });
  }
};

// Deleta um produto por ID;
exports.delete = async (req, res) => {
  const { id } = req.params;
  try {
    const products = await Tec.findByIdAndDelete(id);
    res.status(200).send("Tarefa deletada com sucesso!");
  } catch (error) {
    return res.status(400).json({ error: "Erro ao remover produto." });
  }
};

// L√™ todos os produtos da base;
exports.read = async (req, res) => {
  try {
    // Busca todos os produtos dispon√≠veis;
    const products = await Tec.find();

    // Conta quantos produtos existem baseado na sua extens√£o;
    const totalProd = products.length;

    // Retorna com todos os produtos e o total existente;
    res.status(200).json({
      totalProd,
      products,
    });
  } catch (error) {
    return res
      .status(400)
      .json({ erro: "Erro ao ler os produtos da base de dados." });
  }
};

// L√™ um √∫nico produto pelo ID na base de dados;
exports.readID = async (req, res) => {
  const { id } = req.params;
  try {
    const product = await Tec.findById(id); // Busca o produto espec√≠fico pelo ID;

    if (!product) {
      return res.status(404).json({ error: "Produto n√£o encontrado." });
    }

    res.status(200).json({
      product: product,
    });
  } catch (error) {
    return res.status(400).json({ error: "Erro ao ler produto." });
  }
};


Arquivo: "/controllers/userControllers.js":

require("dotenv").config();
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const mongoose = require("mongoose");

exports.register = async (req, res) => {
  const { name, email, password } = req.body;

  try {
    const exists = await User.findOne({ email });
    if (exists) {
      return res.status(400).json({ error: "Email j√° cadastrado. " });
    }

    const salt = await bcrypt.genSalt(12);
    const hash = await bcrypt.hash(password, salt);

    const newUser = new User({ name, email, password: hash });
    await newUser.save();

    res.status(201).json({ message: "Usu√°rio registrado com sucesso! " });
  } catch (error) {
    res.status(500).json({ error: "Erro ao registrar usu√°rio. " });
  }
};

exports.login = async (req, res) => {
  const { email, password } = req.body;

  try {
    if (!email || !password) {
      return res.status(400).json({ error: "Email e senha s√£o obrigat√≥rios." });
    }

    const user = await User.findOne({ email }).select("+password");
    if (!user) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado. " });
    }

    const validPass = await bcrypt.compare(password, user.password);
    if (!validPass) {
      return res.status(401).json({ error: "Senha inv√°lida. " });
    }

    const token = jwt.sign(
      { id: user._id, name: user.name, email: user.email },
      process.env.SECRET,
      { expiresIn: "3h" }
    );

    res.status(200).json({
      message: "Login bem-sucedido!",
      token,
      user: {
        id: user._id,
        name: user.name,
        email: user.email,
      },
    });
  } catch (error) {
    console.error("Erro no login:", error);
    res.status(500).json({ error: "Erro ao realizar login. " });
  }
};

exports.profile = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select("-password");
    if (!user) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    res.status(200).json({ user });
  } catch (error) {
    console.error("Erro ao buscar usu√°rio:", error);
    res.status(500).json({ error: "Erro interno ao buscar usu√°rio." });
  }
};

exports.updateUser = async (req, res) => {
  const updates = req.body;

  try {
    const user = await User.findByIdAndUpdate(req.user.id, updates, {
      new: true,
      runValidators: true,
    }).select("-password");

    if (!user) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    res.json({ message: "Dados atualizados.", user: user });
  } catch (error) {
    console.error("Erro ao atualizar usu√°rio:", error);
    res.status(500).json({ error: "Erro interno ao atualizar usu√°rio." });
  }
};

exports.updateEmail = async (req, res) => {
  try {
    const { newEmail } = req.body;

    // Verifica se o email j√° est√° cadastrado
    const exists = await User.findOne({ email: newEmail });
    if (exists) {
      return res.status(400).json({ error: "Este e-mail j√° est√° em uso." });
    }

    const user = await User.findByIdAndUpdate(
      req.user.id,
      { email: newEmail },
      { new: true, runValidators: true }
    ).select("-password");

    if (!user) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    res.json({ message: "E-mail atualizado com sucesso.", user });
  } catch (error) {
    console.error("Erro ao atualizar e-mail:", error);
    res.status(500).json({ error: "Erro interno ao atualizar e-mail." });
  }
};

exports.changePassword = async (req, res) => {
  try {
    const { currentPass, newPass } = req.body;

    const user = await User.findById(req.user.id).select("+password");
    if (!user) {
      return res.status(404).json({ error: "Usu√°rio n√£o encontrado." });
    }

    const validPass = await bcrypt.compare(currentPass, user.password);
    if (!validPass) {
      return res.status(400).json({ error: "Senha atual incorreta. " });
    }

    const hash = await bcrypt.hash(newPass, 12);
    user.password = hash;
    await user.save();

    res.json({ message: "Senha alterada com sucesso." });
  } catch (error) {
    console.error("Erro ao alterar senha:", error);
    res.status(500).json({ error: "Erro interno ao alterar senha." });
  }
};

exports.deleteUser = async (req, res) => {
  try {
    await User.findByIdAndDelete(req.user.id);
    res.json({ message: "Conta exclu√≠da com sucesso." });
  } catch (error) {
    console.error("Erro ao excluir conta:", error);
    res.status(500).json({ error: "Erro interno ao excluir conta." });
  }
};

exports.searchUsers = async (req, res) => {
  try {
    const { name, email, page = 1, limit = 10 } = req.query;

    const filters = {};
    if (name) filters.name = { $regex: name, $options: "i" };
    if (email) filters.email = { $regex: email, $options: "i" };

    const usersResult = await User.find(filters)
      .select("-password")
      .skip((page - 1) * limit)
      .limit(Number(limit));

    res.json({ total: usersResult.length, usersResult });
  } catch (error) {
    console.error("Erro ao buscar usu√°rios:", error);
    res.status(500).json({ error: "Erro interno ao buscar usu√°rios." });
  }
};


Arquivo: "/config/dbTec.js":

const mongoose = require("mongoose"); // Importa a biblioteca do MongoDB;

mongoose.set("strictQuery", true); // Chama a fun√ß√£o Set da biblioteca mongoose e passa dois par√¢metros;

require("dotenv").config(); // Oculta os dados de acesso do DB

// Credenciais do DB
const dbUser = process.env.DB_USER;
const dbPass = process.env.DB_PASS;

async function main() {
  // Conex√£o com o banco estabelecida
  await mongoose.connect(
    `mongodb+srv://${dbUser}:${dbPass}@projectapi.mkgylgr.mongodb.net/?retryWrites=true&w=majority&appName=ProjectAPI`
  );

  console.log("Conex√£o bem sucedida.");
}
main().catch((err) => console.log(err));

module.exports = main;
